
=encoding euc-jp

=head1 NAME

=begin original

perlmodstyle - Perl module style guide

=end original

perlmodstyle - Perl モジュールスタイルガイド

=head1 INTRODUCTION

=begin original

This document attempts to describe the Perl Community's "best practice"
for writing Perl modules.  It extends the recommendations found in 
L<perlstyle> , which should be considered required reading
before reading this document.

=end original

このドキュメントは Perl コミュニティにおける
Perl モジュールを書くときの「ベストプラクティス」を
説明しています。
これは L<perlstyle> にある推奨項目を拡張します;
L<perlstyle> はこのドキュメントに先立って目を通しておいてください。

=begin original

While this document is intended to be useful to all module authors, it is
particularly aimed at authors who wish to publish their modules on CPAN.

=end original

このドキュメントは全てのモジュール作者に役立つように
意図していますが、CPAN にモジュールを公開しようと
している作者を特に意図しています。

=begin original

The focus is on elements of style which are visible to the users of a 
module, rather than those parts which are only seen by the module's 
developers.  However, many of the guidelines presented in this document
can be extrapolated and applied successfully to a module's internals.

=end original

焦点は、モジュール開発者の目にとまる点ではなく、
モジュールのユーザの目にとまるスタイルの要素に置かれています。
しかし、このドキュメントであげられているガイドラインの
多くはモジュールの内部にも推測、適用できるでしょう。

=begin original

This document differs from L<perlnewmod> in that it is a style guide
rather than a tutorial on creating CPAN modules.  It provides a
checklist against which modules can be compared to determine whether
they conform to best practice, without necessarily describing in detail
how to achieve this.  

=end original

このドキュメントは L<perlnewmod> とは、それが CPAN モジュールを
作るためのチュートリアルであるのに対し、
こちらはスタイルに関するガイドという点で異なっています。
それはモジュールがベストプラクティスに沿っているかを
これを成し遂げる方法を詳細に記述する必要なしに
決定するために比較するためのチェックリストを
提供しています。

=begin original

All the advice contained in this document has been gleaned from
extensive conversations with experienced CPAN authors and users.  Every
piece of advice given here is the result of previous mistakes.  This
information is here to help you avoid the same mistakes and the extra
work that would inevitably be required to fix them.

=end original

このドキュメントに含まれる全てのアドバイスは
経験に富んだ CPAN 作者及びユーザの広範囲にわたる
議論から少しずつ集められています。
ここにあるアドバイスのどの欠片も以前の過ちの解決として
生まれました。
この情報は同じ過ちを繰り返さないように、
そして必然的にそれらを修正するという余計な作業が
必要とならないように、あなたを手助けするために
ここにあります。

=begin original

The first section of this document provides an itemized checklist; 
subsequent sections provide a more detailed discussion of the items on 
the list.  The final section, "Common Pitfalls", describes some of the 
most popular mistakes made by CPAN authors.

=end original

このドキュメントの最初のセクションでは項目別のチェックリストを
提供します; その後のセクションではリストの各項目について
より詳しい説明を行います。
そして最後のセクション、「よくある落とし穴」で
CPAN 作者がよくやってしまう特にメジャーな失敗をいくつか
説明します。

=head1 QUICK CHECKLIST

(クイックチェックリスト)

=begin original

For more detail on each item in this checklist, see below.

=end original

このチェックリストにおける各項目の詳細は後のセクションを
参照してください。

=head2 Before you start

(始める前に)

=over 4

=item *

=begin original

Don't re-invent the wheel

=end original

車輪の再発明をするな

=item *

=begin original

Patch, extend or subclass an existing module where possible

=end original

可能であるのなら既存のモジュールにパッチ、拡張、 
サブクラス化を行え

=item *

=begin original

Do one thing and do it well

=end original

一つのことを行いそれがちゃんと動くようにせよ

=item *

=begin original

Choose an appropriate name

=end original

ふさわしい名前を選べ

=back

=head2 The API

(API)

=over 4

=item *

=begin original

API should be understandable by the average programmer

=end original

API は平均的なプログラマが理解できるようにするべきである

=item *

=begin original

Simple methods for simple tasks

=end original

簡単なタスクのための簡単なメソッドを

=item *

=begin original

Separate functionality from output

=end original

機能を出力から分離せよ

=item *

=begin original

Consistent naming of subroutines or methods

=end original

関数やメソッドには一貫性のある名前を付けよ

=item *

=begin original

Use named parameters (a hash or hashref) when there are more than two
parameters

=end original

二つ以上の引数ををとるのなら
名前付きの引数(ハッシュまたはハッシュリファレンス)を使え

=back

=head2 Stability

(安定性)

=over 4

=item *

=begin original

Ensure your module works under C<use strict> and C<-w>

=end original

C<use strict> 及び C<-w> の環境下で動作することを
保証しろ

=item *

=begin original

Stable modules should maintain backwards compatibility

=end original

安定したモジュールは後方互換を維持するべきである

=back

=head2 Documentation

(ドキュメンテーション)

=over 4

=item *

=begin original

Write documentation in POD

=end original

ドキュメントを POD 形式で書け

=item *

=begin original

Document purpose, scope and target applications

=end original


目的、範囲、及び対象となるアプリケーションを記述せよ

=item *

=begin original

Document each publically accessible method or subroutine, including params and return values

=end original

個々の公開されているアクセスメソッドまたは関数を、
パラメータ及び復帰値も含めて記述せよ

=item *

=begin original

Give examples of use in your documentation

=end original

ドキュメントに使い方を例示せよ

=item *

=begin original

Provide a README file and perhaps also release notes, changelog, etc

=end original

README ファイルを提供せよ; またリリースノート、
更新履歴もできれば.

=item *

=begin original

Provide links to further information (URL, email)

=end original

より詳細な情報へのリンク(URL, email)を提供せよ

=back

=head2 Release considerations

(リリース時に確認すること)

=over 4

=item *

=begin original

Specify pre-requisites in Makefile.PL or Build.PL

=end original

Makefile.PL または Build.PL に依存(pre-requisites)を記述せよ

=item *

=begin original

Specify Perl version requirements with C<use>

=end original

動作に必要な Perl のバージョンを C<use> で記述せよ

=item *

=begin original

Include tests with your module

=end original

モジュールにはテストを含めよ

=item *

=begin original

Choose a sensible and consistent version numbering scheme (X.YY is the common Perl module numbering scheme)

=end original

バージョン番号の採番には一般的で矛盾の起きない形式を選べ
(Perl モジュールでは一般的に X.YY が使われている)

=item *

=begin original

Increment the version number for every change, no matter how small

=end original

たとえそれがどんなに小さな変更であっても、変更毎にバージョン番号を増やせ

=item *

=begin original

Package the module using "make dist"

=end original

モジュールのパッケージングには "make dist" を使え

=item *

=begin original

Choose an appropriate license (GPL/Artistic is a good default)

=end original

適切なライセンスを選べ (GPL/Artistic はよいデフォルトです)

=back

=head1 BEFORE YOU START WRITING A MODULE

(モジュールを書き始める前に)

=begin original

Try not to launch headlong into developing your module without spending
some time thinking first.  A little forethought may save you a vast
amount of effort later on.

=end original

最初に少し考える時間を取らずにモジュール開発に取りかかろうとしないで
ください。
予め少し考えておくことで、後での多くの苦労を防げます。

=head2 Has it been done before?

(以前作られていなかった?)

=begin original

You may not even need to write the module.  Check whether it's already 
been done in Perl, and avoid re-inventing the wheel unless you have a 
good reason.

=end original

そもそもモジュールを書く必要がないかもしれません。
既に Perl で行われているかどうかを調べて、よい理由がない限り
車輪の再発明は避けてください。

=begin original

Good places to look for pre-existing modules include
http://search.cpan.org/ and asking on modules@perl.org

=end original

既にあるモジュールを探すのによい場所は、http://search.cpan.org/ と、
modules@perl.org に聞くことです。

=begin original

If an existing module B<almost> does what you want, consider writing a
patch, writing a subclass, or otherwise extending the existing module
rather than rewriting it.

=end original

もし既にあるモジュールがやりたいことを B<ほとんど> しているなら、
それを書き直すのではなく、パッチの作ったり、派生クラスの作ったり、
あるいは既にあるモジュールを拡張するためのその他の手段を考慮してください。

=head2 Do one thing and do it well

(一つのことをうまくやる)

=begin original

At the risk of stating the obvious, modules are intended to be modular.
A Perl developer should be able to use modules to put together the
building blocks of their application.  However, it's important that the
blocks are the right shape, and that the developer shouldn't have to use
a big block when all they need is a small one.

=end original

At the risk of stating the obvious, modules are intended to be modular.
A Perl developer should be able to use modules to put together the
building blocks of their application.  However, it's important that the
blocks are the right shape, and that the developer shouldn't have to use
a big block when all they need is a small one.
(TBT)

=begin original

Your module should have a clearly defined scope which is no longer than
a single sentence.  Can your module be broken down into a family of
related modules?

=end original

Your module should have a clearly defined scope which is no longer than
a single sentence.  Can your module be broken down into a family of
related modules?
(TBT)

=begin original

Bad example:

=end original

悪い例:

=begin original

"FooBar.pm provides an implementation of the FOO protocol and the
related BAR standard."

=end original

「FooBar.pm は、FOO プロトコルと、関連する BAR 標準の実装を提供します。」

=begin original

Good example:

=end original

良い例:

=begin original

"Foo.pm provides an implementation of the FOO protocol.  Bar.pm
implements the related BAR protocol."

=end original

「Foo.pm は FOO プロトコルの実装を提供します。
Bar.pm は関連する BAR プロトコルを実装します。」

=begin original

This means that if a developer only needs a module for the BAR standard,
they should not be forced to install libraries for FOO as well.

=end original

This means that if a developer only needs a module for the BAR standard,
they should not be forced to install libraries for FOO as well.
(TBT)

=head2 What's in a name?

(なんて名前?)

=begin original

Make sure you choose an appropriate name for your module early on.  This
will help people find and remember your module, and make programming
with your module more intuitive.

=end original

Make sure you choose an appropriate name for your module early on.  This
will help people find and remember your module, and make programming
with your module more intuitive.
(TBT)

=begin original

When naming your module, consider the following:

=end original

When naming your module, consider the following:
(TBT)

=over 4

=item *

=begin original

Be descriptive (i.e. accurately describes the purpose of the module).

=end original

Be descriptive (i.e. accurately describes the purpose of the module).
(TBT)

=item * 

=begin original

Be consistent with existing modules.

=end original

Be consistent with existing modules.
(TBT)

=item *

=begin original

Reflect the functionality of the module, not the implementation.

=end original

Reflect the functionality of the module, not the implementation.
(TBT)

=item *

=begin original

Avoid starting a new top-level hierarchy, especially if a suitable
hierarchy already exists under which you could place your module.

=end original

Avoid starting a new top-level hierarchy, especially if a suitable
hierarchy already exists under which you could place your module.
(TBT)

=back

=begin original

You should contact modules@perl.org to ask them about your module name
before publishing your module.  You should also try to ask people who 
are already familiar with the module's application domain and the CPAN
naming system.  Authors of similar modules, or modules with similar
names, may be a good place to start.

=end original

You should contact modules@perl.org to ask them about your module name
before publishing your module.  You should also try to ask people who 
are already familiar with the module's application domain and the CPAN
naming system.  Authors of similar modules, or modules with similar
names, may be a good place to start.
(TBT)

=head1 DESIGNING AND WRITING YOUR MODULE

=begin original

Considerations for module design and coding:

=end original

Considerations for module design and coding:
(TBT)

=head2 To OO or not to OO?

=begin original

Your module may be object oriented (OO) or not, or it may have both kinds 
of interfaces available.  There are pros and cons of each technique, which 
should be considered when you design your API.

=end original

Your module may be object oriented (OO) or not, or it may have both kinds 
of interfaces available.  There are pros and cons of each technique, which 
should be considered when you design your API.
(TBT)

=begin original

According to Damian Conway, you should consider using OO:

=end original

According to Damian Conway, you should consider using OO:
(TBT)

=over 4

=item * 

=begin original

When the system is large or likely to become so

=end original

When the system is large or likely to become so
(TBT)

=item * 

=begin original

When the data is aggregated in obvious structures that will become objects 

=end original

When the data is aggregated in obvious structures that will become objects 
(TBT)

=item * 

=begin original

When the types of data form a natural hierarchy that can make use of inheritance

=end original

When the types of data form a natural hierarchy that can make use of inheritance
(TBT)

=item *

=begin original

When operations on data vary according to data type (making
polymorphic invocation of methods feasible)

=end original

When operations on data vary according to data type (making
polymorphic invocation of methods feasible)
(TBT)

=item *

=begin original

When it is likely that new data types may be later introduced
into the system, and will need to be handled by existing code

=end original

When it is likely that new data types may be later introduced
into the system, and will need to be handled by existing code
(TBT)

=item *

=begin original

When interactions between data are best represented by
overloaded operators

=end original

When interactions between data are best represented by
overloaded operators
(TBT)

=item *

=begin original

When the implementation of system components is likely to
change over time (and hence should be encapsulated)

=end original

When the implementation of system components is likely to
change over time (and hence should be encapsulated)
(TBT)

=item *

=begin original

When the system design is itself object-oriented

=end original

When the system design is itself object-oriented
(TBT)

=item *

=begin original

When large amounts of client code will use the software (and
should be insulated from changes in its implementation)

=end original

When large amounts of client code will use the software (and
should be insulated from changes in its implementation)
(TBT)

=item *

=begin original

When many separate operations will need to be applied to the
same set of data

=end original

When many separate operations will need to be applied to the
same set of data
(TBT)

=back

=begin original

Think carefully about whether OO is appropriate for your module.
Gratuitous object orientation results in complex APIs which are
difficult for the average module user to understand or use.

=end original

Think carefully about whether OO is appropriate for your module.
Gratuitous object orientation results in complex APIs which are
difficult for the average module user to understand or use.
(TBT)

=head2 Designing your API

=begin original

Your interfaces should be understandable by an average Perl programmer.  
The following guidelines may help you judge whether your API is
sufficiently straightforward:

=end original

Your interfaces should be understandable by an average Perl programmer.  
The following guidelines may help you judge whether your API is
sufficiently straightforward:
(TBT)

=over 4

=item Write simple routines to do simple things.

=begin original

It's better to have numerous simple routines than a few monolithic ones.
If your routine changes its behaviour significantly based on its
arguments, it's a sign that you should have two (or more) separate
routines.

=end original

It's better to have numerous simple routines than a few monolithic ones.
If your routine changes its behaviour significantly based on its
arguments, it's a sign that you should have two (or more) separate
routines.
(TBT)

=item Separate functionality from output.  

=begin original

Return your results in the most generic form possible and allow the user 
to choose how to use them.  The most generic form possible is usually a
Perl data structure which can then be used to generate a text report,
HTML, XML, a database query, or whatever else your users require.

=end original

Return your results in the most generic form possible and allow the user 
to choose how to use them.  The most generic form possible is usually a
Perl data structure which can then be used to generate a text report,
HTML, XML, a database query, or whatever else your users require.
(TBT)

=begin original

If your routine iterates through some kind of list (such as a list of
files, or records in a database) you may consider providing a callback
so that users can manipulate each element of the list in turn.
File::Find provides an example of this with its 
C<find(\&wanted, $dir)> syntax.

=end original

If your routine iterates through some kind of list (such as a list of
files, or records in a database) you may consider providing a callback
so that users can manipulate each element of the list in turn.
File::Find provides an example of this with its 
C<find(\&wanted, $dir)> syntax.
(TBT)

=item Provide sensible shortcuts and defaults.

=begin original

Don't require every module user to jump through the same hoops to achieve a
simple result.  You can always include optional parameters or routines for 
more complex or non-standard behaviour.  If most of your users have to
type a few almost identical lines of code when they start using your
module, it's a sign that you should have made that behaviour a default.
Another good indicator that you should use defaults is if most of your 
users call your routines with the same arguments.

=end original

Don't require every module user to jump through the same hoops to achieve a
simple result.  You can always include optional parameters or routines for 
more complex or non-standard behaviour.  If most of your users have to
type a few almost identical lines of code when they start using your
module, it's a sign that you should have made that behaviour a default.
Another good indicator that you should use defaults is if most of your 
users call your routines with the same arguments.
(TBT)

=item Naming conventions

=begin original

Your naming should be consistent.  For instance, it's better to have:

=end original

Your naming should be consistent.  For instance, it's better to have:
(TBT)

	display_day();
	display_week();
	display_year();

=begin original

than

=end original

than
(TBT)

	display_day();
	week_display();
	show_year();

=begin original

This applies equally to method names, parameter names, and anything else
which is visible to the user (and most things that aren't!)

=end original

This applies equally to method names, parameter names, and anything else
which is visible to the user (and most things that aren't!)
(TBT)

=item Parameter passing

=begin original

Use named parameters. It's easier to use a hash like this:

=end original

Use named parameters. It's easier to use a hash like this:
(TBT)

    $obj->do_something(
	    name => "wibble",
	    type => "text",
	    size => 1024,
    );

=begin original

... than to have a long list of unnamed parameters like this:

=end original

... than to have a long list of unnamed parameters like this:
(TBT)

    $obj->do_something("wibble", "text", 1024);

=begin original

While the list of arguments might work fine for one, two or even three
arguments, any more arguments become hard for the module user to
remember, and hard for the module author to manage.  If you want to add
a new parameter you will have to add it to the end of the list for
backward compatibility, and this will probably make your list order
unintuitive.  Also, if many elements may be undefined you may see the
following unattractive method calls:

=end original

While the list of arguments might work fine for one, two or even three
arguments, any more arguments become hard for the module user to
remember, and hard for the module author to manage.  If you want to add
a new parameter you will have to add it to the end of the list for
backward compatibility, and this will probably make your list order
unintuitive.  Also, if many elements may be undefined you may see the
following unattractive method calls:
(TBT)

    $obj->do_something(undef, undef, undef, undef, undef, undef, 1024);

=begin original

Provide sensible defaults for parameters which have them.  Don't make
your users specify parameters which will almost always be the same.

=end original

Provide sensible defaults for parameters which have them.  Don't make
your users specify parameters which will almost always be the same.
(TBT)

=begin original

The issue of whether to pass the arguments in a hash or a hashref is
largely a matter of personal style. 

=end original

The issue of whether to pass the arguments in a hash or a hashref is
largely a matter of personal style. 
(TBT)

=begin original

The use of hash keys starting with a hyphen (C<-name>) or entirely in 
upper case (C<NAME>) is a relic of older versions of Perl in which
ordinary lower case strings were not handled correctly by the C<=E<gt>>
operator.  While some modules retain uppercase or hyphenated argument
keys for historical reasons or as a matter of personal style, most new
modules should use simple lower case keys.  Whatever you choose, be
consistent!

=end original

The use of hash keys starting with a hyphen (C<-name>) or entirely in 
upper case (C<NAME>) is a relic of older versions of Perl in which
ordinary lower case strings were not handled correctly by the C<=E<gt>>
operator.  While some modules retain uppercase or hyphenated argument
keys for historical reasons or as a matter of personal style, most new
modules should use simple lower case keys.  Whatever you choose, be
consistent!
(TBT)

=back

=head2 Strictness and warnings

=begin original

Your module should run successfully under the strict pragma and should
run without generating any warnings.  Your module should also handle 
taint-checking where appropriate, though this can cause difficulties in
many cases.

=end original

Your module should run successfully under the strict pragma and should
run without generating any warnings.  Your module should also handle 
taint-checking where appropriate, though this can cause difficulties in
many cases.
(TBT)

=head2 Backwards compatibility

=begin original

Modules which are "stable" should not break backwards compatibility
without at least a long transition phase and a major change in version
number.

=end original

Modules which are "stable" should not break backwards compatibility
without at least a long transition phase and a major change in version
number.
(TBT)

=head2 Error handling and messages

=begin original

When your module encounters an error it should do one or more of:

=end original

When your module encounters an error it should do one or more of:
(TBT)

=over 4

=item *

=begin original

Return an undefined value.

=end original

Return an undefined value.
(TBT)

=item *

=begin original

set C<$Module::errstr> or similar (C<errstr> is a common name used by
DBI and other popular modules; if you choose something else, be sure to
document it clearly).

=end original

set C<$Module::errstr> or similar (C<errstr> is a common name used by
DBI and other popular modules; if you choose something else, be sure to
document it clearly).
(TBT)

=item *

=begin original

C<warn()> or C<carp()> a message to STDERR.  

=end original

C<warn()> or C<carp()> a message to STDERR.  
(TBT)

=item *

=begin original

C<croak()> only when your module absolutely cannot figure out what to
do.  (C<croak()> is a better version of C<die()> for use within 
modules, which reports its errors from the perspective of the caller.  
See L<Carp> for details of C<croak()>, C<carp()> and other useful
routines.)

=end original

C<croak()> only when your module absolutely cannot figure out what to
do.  (C<croak()> is a better version of C<die()> for use within 
modules, which reports its errors from the perspective of the caller.  
See L<Carp> for details of C<croak()>, C<carp()> and other useful
routines.)
(TBT)

=item *

=begin original

As an alternative to the above, you may prefer to throw exceptions using 
the Error module.

=end original

As an alternative to the above, you may prefer to throw exceptions using 
the Error module.
(TBT)

=back

=begin original

Configurable error handling can be very useful to your users.  Consider
offering a choice of levels for warning and debug messages, an option to
send messages to a separate file, a way to specify an error-handling
routine, or other such features.  Be sure to default all these options
to the commonest use.

=end original

Configurable error handling can be very useful to your users.  Consider
offering a choice of levels for warning and debug messages, an option to
send messages to a separate file, a way to specify an error-handling
routine, or other such features.  Be sure to default all these options
to the commonest use.
(TBT)

=head1 DOCUMENTING YOUR MODULE

=head2 POD

=begin original

Your module should include documentation aimed at Perl developers.
You should use Perl's "plain old documentation" (POD) for your general 
technical documentation, though you may wish to write additional
documentation (white papers, tutorials, etc) in some other format.  
You need to cover the following subjects:

=end original

Your module should include documentation aimed at Perl developers.
You should use Perl's "plain old documentation" (POD) for your general 
technical documentation, though you may wish to write additional
documentation (white papers, tutorials, etc) in some other format.  
You need to cover the following subjects:
(TBT)

=over 4

=item *

=begin original

A synopsis of the common uses of the module

=end original

モジュールの一般的な使い方の概要

=item *

=begin original

The purpose, scope and target applications of your module

=end original

モジュールの目的、スコープ、対象アプリケーション

=item *

=begin original

Use of each publically accessible method or subroutine, including
parameters and return values

=end original

Use of each publically accessible method or subroutine, including
parameters and return values
(TBT)

=item *

=begin original

Examples of use

=end original

使用例

=item *

=begin original

Sources of further information

=end original

さらなる情報の情報源

=item *

=begin original

A contact email address for the author/maintainer

=end original

作者/メンテナへ連絡するための email アドレス

=back

=begin original

The level of detail in Perl module documentation generally goes from
less detailed to more detailed.  Your SYNOPSIS section should contain a
minimal example of use (perhaps as little as one line of code; skip the
unusual use cases or anything not needed by most users); the
DESCRIPTION should describe your module in broad terms, generally in
just a few paragraphs; more detail of the module's routines or methods,
lengthy code examples, or other in-depth material should be given in 
subsequent sections.

=end original

The level of detail in Perl module documentation generally goes from
less detailed to more detailed.  Your SYNOPSIS section should contain a
minimal example of use (perhaps as little as one line of code; skip the
unusual use cases or anything not needed by most users); the
DESCRIPTION should describe your module in broad terms, generally in
just a few paragraphs; more detail of the module's routines or methods,
lengthy code examples, or other in-depth material should be given in 
subsequent sections.
(TBT)

=begin original

Ideally, someone who's slightly familiar with your module should be able
to refresh their memory without hitting "page down".  As your reader
continues through the document, they should receive a progressively
greater amount of knowledge.

=end original

Ideally, someone who's slightly familiar with your module should be able
to refresh their memory without hitting "page down".  As your reader
continues through the document, they should receive a progressively
greater amount of knowledge.
(TBT)

=begin original

The recommended order of sections in Perl module documentation is:

=end original

The recommended order of sections in Perl module documentation is:
(TBT)

=over 4

=item * 

NAME

=item *

SYNOPSIS

=item *

DESCRIPTION

=item *

=begin original

One or more sections or subsections giving greater detail of available 
methods and routines and any other relevant information.

=end original

One or more sections or subsections giving greater detail of available 
methods and routines and any other relevant information.
(TBT)

=item *

=begin original

BUGS/CAVEATS/etc

=end original

BUGS/CAVEATS など

=item *

AUTHOR

=item *

SEE ALSO

=item *

=begin original

COPYRIGHT and LICENSE

=end original

COPYRIGHT と LICENSE

=back

=begin original

Keep your documentation near the code it documents ("inline"
documentation).  Include POD for a given method right above that 
method's subroutine.  This makes it easier to keep the documentation up
to date, and avoids having to document each piece of code twice (once in
POD and once in comments).

=end original

Keep your documentation near the code it documents ("inline"
documentation).  Include POD for a given method right above that 
method's subroutine.  This makes it easier to keep the documentation up
to date, and avoids having to document each piece of code twice (once in
POD and once in comments).
(TBT)

=head2 README, INSTALL, release notes, changelogs

=begin original

Your module should also include a README file describing the module and
giving pointers to further information (website, author email).  

=end original

Your module should also include a README file describing the module and
giving pointers to further information (website, author email).  
(TBT)

=begin original

An INSTALL file should be included, and should contain simple installation 
instructions. When using ExtUtils::MakeMaker this will usually be:

=end original

An INSTALL file should be included, and should contain simple installation 
instructions. When using ExtUtils::MakeMaker this will usually be:
(TBT)

=over 4

=item perl Makefile.PL

=item make

=item make test

=item make install

=back

=begin original

When using Module::Build, this will usually be:

=end original

Module::Build を使うなら、これは普通は以下のようになります:

=over 4

=item perl Build.PL

=item perl Build

=item perl Build test

=item perl Build install

=back

=begin original

Release notes or changelogs should be produced for each release of your
software describing user-visible changes to your module, in terms
relevant to the user.

=end original

Release notes or changelogs should be produced for each release of your
software describing user-visible changes to your module, in terms
relevant to the user.
(TBT)

=head1 RELEASE CONSIDERATIONS

=head2 Version numbering

(バージョン番号)

=begin original

Version numbers should indicate at least major and minor releases, and
possibly sub-minor releases.  A major release is one in which most of
the functionality has changed, or in which major new functionality is
added.  A minor release is one in which a small amount of functionality
has been added or changed.  Sub-minor version numbers are usually used
for changes which do not affect functionality, such as documentation
patches.

=end original

Version numbers should indicate at least major and minor releases, and
possibly sub-minor releases.  A major release is one in which most of
the functionality has changed, or in which major new functionality is
added.  A minor release is one in which a small amount of functionality
has been added or changed.  Sub-minor version numbers are usually used
for changes which do not affect functionality, such as documentation
patches.
(TBT)

=begin original

The most common CPAN version numbering scheme looks like this:

=end original

The most common CPAN version numbering scheme looks like this:
(TBT)

    1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32

=begin original

A correct CPAN version number is a floating point number with at least 
2 digits after the decimal. You can test whether it conforms to CPAN by 
using

=end original

A correct CPAN version number is a floating point number with at least 
2 digits after the decimal. You can test whether it conforms to CPAN by 
using
(TBT)

    perl -MExtUtils::MakeMaker -le 'print MM->parse_version(shift)' 'Foo.pm'

=begin original

If you want to release a 'beta' or 'alpha' version of a module but
don't want CPAN.pm to list it as most recent use an '_' after the
regular version number followed by at least 2 digits, eg. 1.20_01. If
you do this, the following idiom is recommended:

=end original

If you want to release a 'beta' or 'alpha' version of a module but
don't want CPAN.pm to list it as most recent use an '_' after the
regular version number followed by at least 2 digits, eg. 1.20_01. If
you do this, the following idiom is recommended:
(TBT)

  $VERSION = "1.12_01";
  $XS_VERSION = $VERSION; # only needed if you have XS code
  $VERSION = eval $VERSION;

=begin original

With that trick MakeMaker will only read the first line and thus read
the underscore, while the perl interpreter will evaluate the $VERSION
and convert the string into a number. Later operations that treat
$VERSION as a number will then be able to do so without provoking a
warning about $VERSION not being a number.

=end original

With that trick MakeMaker will only read the first line and thus read
the underscore, while the perl interpreter will evaluate the $VERSION
and convert the string into a number. Later operations that treat
$VERSION as a number will then be able to do so without provoking a
warning about $VERSION not being a number.
(TBT)

=begin original

Never release anything (even a one-word documentation patch) without
incrementing the number.  Even a one-word documentation patch should
result in a change in version at the sub-minor level.

=end original

Never release anything (even a one-word documentation patch) without
incrementing the number.  Even a one-word documentation patch should
result in a change in version at the sub-minor level.
(TBT)

=head2 Pre-requisites

(依存)

=begin original

Module authors should carefully consider whether to rely on other
modules, and which modules to rely on.

=end original

モジュール作者は、他のモジュールに依存するかどうか、どのモジュールに
依存するかについて注意深く考慮するべきです。

=begin original

Most importantly, choose modules which are as stable as possible.  In
order of preference: 

=end original

もっとも重要なこととして、できるだけ安定しているモジュールを選んでください。
優先順位としては:

=over 4

=item *

=begin original

Core Perl modules

=end original

コア Perl モジュール

=item *

=begin original

Stable CPAN modules

=end original

安定している CPAN モジュール

=item *

=begin original

Unstable CPAN modules

=end original

不安定な CPAN モジュール

=item *

=begin original

Modules not available from CPAN

=end original

CPAN から利用できないモジュール

=back

=begin original

Specify version requirements for other Perl modules in the
pre-requisites in your Makefile.PL or Build.PL.

=end original

Specify version requirements for other Perl modules in the
pre-requisites in your Makefile.PL or Build.PL.
(TBT)

=begin original

Be sure to specify Perl version requirements both in Makefile.PL or
Build.PL and with C<require 5.6.1> or similar. See the section on
C<use VERSION> of L<perlfunc/require> for details.

=end original

Be sure to specify Perl version requirements both in Makefile.PL or
Build.PL and with C<require 5.6.1> or similar. See the section on
C<use VERSION> of L<perlfunc/require> for details.
(TBT)

=head2 Testing

(テスト)

=begin original

All modules should be tested before distribution (using "make disttest"),
and the tests should also be available to people installing the modules 
(using "make test").  
For Module::Build you would use the C<make test> equivalent C<perl Build test>.

=end original

All modules should be tested before distribution (using "make disttest"),
and the tests should also be available to people installing the modules 
(using "make test").  
For Module::Build you would use the C<make test> equivalent C<perl Build test>.
(TBT)

=begin original

The importance of these tests is proportional to the alleged stability of a 
module -- a module which purports to be stable or which hopes to achieve wide 
use should adhere to as strict a testing regime as possible.

=end original

The importance of these tests is proportional to the alleged stability of a 
module -- a module which purports to be stable or which hopes to achieve wide 
use should adhere to as strict a testing regime as possible.
(TBT)

=begin original

Useful modules to help you write tests (with minimum impact on your 
development process or your time) include Test::Simple, Carp::Assert 
and Test::Inline.
For more sophisticated test suites there are Test::More and Test::MockObject.

=end original

Useful modules to help you write tests (with minimum impact on your 
development process or your time) include Test::Simple, Carp::Assert 
and Test::Inline.
For more sophisticated test suites there are Test::More and Test::MockObject.
(TBT)

=head2 Packaging

(パッケージング)

=begin original

Modules should be packaged using one of the standard packaging tools.
Currently you have the choice between ExtUtils::MakeMaker and the
more platform independent Module::Build, allowing modules to be installed in a
consistent manner.
When using ExtUtils::MakeMaker, you can use "make dist" to create your
package. Tools exist to help you to build your module in a MakeMaker-friendly
style. These include ExtUtils::ModuleMaker and h2xs.  See also L<perlnewmod>.

=end original

Modules should be packaged using one of the standard packaging tools.
Currently you have the choice between ExtUtils::MakeMaker and the
more platform independent Module::Build, allowing modules to be installed in a
consistent manner.
When using ExtUtils::MakeMaker, you can use "make dist" to create your
package. Tools exist to help you to build your module in a MakeMaker-friendly
style. These include ExtUtils::ModuleMaker and h2xs.  See also L<perlnewmod>.
(TBT)

=head2 Licensing

=begin original

Make sure that your module has a license, and that the full text of it
is included in the distribution (unless it's a common one and the terms
of the license don't require you to include it).

=end original

Make sure that your module has a license, and that the full text of it
is included in the distribution (unless it's a common one and the terms
of the license don't require you to include it).
(TBT)

=begin original

If you don't know what license to use, dual licensing under the GPL
and Artistic licenses (the same as Perl itself) is a good idea.
See L<perlgpl> and L<perlartistic>.

=end original

If you don't know what license to use, dual licensing under the GPL
and Artistic licenses (the same as Perl itself) is a good idea.
See L<perlgpl> and L<perlartistic>.
(TBT)

=head1 COMMON PITFALLS

(よくある落とし穴)

=head2 Reinventing the wheel

(車輪の再発明)

=begin original

There are certain application spaces which are already very, very well
served by CPAN.  One example is templating systems, another is date and
time modules, and there are many more.  While it is a rite of passage to
write your own version of these things, please consider carefully
whether the Perl world really needs you to publish it.

=end original

There are certain application spaces which are already very, very well
served by CPAN.  One example is templating systems, another is date and
time modules, and there are many more.  While it is a rite of passage to
write your own version of these things, please consider carefully
whether the Perl world really needs you to publish it.
(TBT)

=head2 Trying to do too much

(やりすぎ)

=begin original

Your module will be part of a developer's toolkit.  It will not, in
itself, form the B<entire> toolkit.  It's tempting to add extra features
until your code is a monolithic system rather than a set of modular
building blocks.

=end original

Your module will be part of a developer's toolkit.  It will not, in
itself, form the B<entire> toolkit.  It's tempting to add extra features
until your code is a monolithic system rather than a set of modular
building blocks.
(TBT)

=head2 Inappropriate documentation

(不適切な文書)

=begin original

Don't fall into the trap of writing for the wrong audience.  Your
primary audience is a reasonably experienced developer with at least 
a moderate understanding of your module's application domain, who's just 
downloaded your module and wants to start using it as quickly as possible.

=end original

Don't fall into the trap of writing for the wrong audience.  Your
primary audience is a reasonably experienced developer with at least 
a moderate understanding of your module's application domain, who's just 
downloaded your module and wants to start using it as quickly as possible.
(TBT)

=begin original

Tutorials, end-user documentation, research papers, FAQs etc are not 
appropriate in a module's main documentation.  If you really want to 
write these, include them as sub-documents such as C<My::Module::Tutorial> or
C<My::Module::FAQ> and provide a link in the SEE ALSO section of the
main documentation.  

=end original

Tutorials, end-user documentation, research papers, FAQs etc are not 
appropriate in a module's main documentation.  If you really want to 
write these, include them as sub-documents such as C<My::Module::Tutorial> or
C<My::Module::FAQ> and provide a link in the SEE ALSO section of the
main documentation.  
(TBT)

=head1 SEE ALSO

=over 4

=item L<perlstyle>

=begin original

General Perl style guide

=end original

一般的な Perl スタイルガイド

=item L<perlnewmod>

=begin original

How to create a new module

=end original

新しいモジュールの作り方

=item L<perlpod>

=begin original

POD documentation

=end original

POD 文書

=item L<podchecker>

=begin original

Verifies your POD's correctness

=end original

POD の正しさを検証する

=item Packaging Tools

(パッケージングツール)

L<ExtUtils::MakeMaker>, L<Module::Build>

=item Testing tools

(テストツール)

L<Test::Simple>, L<Test::Inline>, L<Carp::Assert>, L<Test::More>, L<Test::MockObject>

=item http://pause.perl.org/

=begin original

Perl Authors Upload Server.  Contains links to information for module
authors.

=end original

Perl Authors Upload Server。
モジュール作者のための情報へのリンクがあります。

=item Any good book on software engineering

(ソフトウェア工学に関する良い本はなんでも)

=back

=head1 AUTHOR

Kirrily "Skud" Robert <skud@cpan.org>

=begin meta

Translated: 山科 氷魚 (YAMASHINA Hio) <hio@hio.jp> (5.10.0)
Updated: SHIRAKATA Kentaro <argrath@ub32.org> (5.10.1)

=end meta

